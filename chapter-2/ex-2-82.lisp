(define (can-coerce-args? args dest-type)
  (define (can-coerce? src-type dest-type)
    (if (= src-type dest-type)
      true
      (get-coercion src-type dest-type)))
  (define (can-coerce-multi? src-types dest-type)
    (cond
      ((null? src-types) true)
      ((can-coerce? (car src-types) dest-type) (can-coerce-multi? (cdr src-types) dest-type))
      (else false)))
  (can-coerce-multi? (map type-tag args) dest-type))

(define (coerce-args args dest-type)
  (define (coerce-arg arg)
    (let ((arg-type (type-tag arg)))
      (if (= arg-type dest-type)
	arg
	((get-coercion arg-type dest-type) arg))))
  (map coerce-arg args))

(define (apply-generic op . args)
  (define (get-proc args)
    (get op (map type-tag args)))
  (define (proces-args args)
    (apply (get-proc args) (map contents args)))
  (define (can-process-type? dest-type)
    (and (can-coerce-args? args dest-type) (get-proc (coerce-args args dest-type))))
  (define (try-types dest-types)
    (if (null? dest-types)
      (error "No method for these types" (list op type-tags))
      (let ((dest-type (car dest-types)))
	(if (can-process-type? dest-type)
	  (process-args (coerce-args args dest-type)))
	(try-types (cdr dest-types)))))
  (if (get-proc args)
    (process-args args)
    (try-types (map type-tag args))))
