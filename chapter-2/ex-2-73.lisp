(define (install-sums-products-package)
  (define (=number? exp num)
    (and (number? exp) (= exp num)))
  (define (make-sum a1 a2)
    (cond ((=number? a1 0) a2)
	  ((=number? a2 0) a1)
	  ((and (number? a1) (number? a2)) (+ a1 a2))
	  (else (list '+ a1 a2))))
  (define (addend s) (car s))
  (define (augend s) (cadr s))
  (define (multiplier p) (car p))
  (define (multiplicand p) (cadr p))
  (define (make-product m1 m2)
    (cond ((or (=number? m1 0) (=number? m2 0)) 0)
	  ((=number? m1 1) m2)
	  ((=number? m2 1) m1)
	  ((and (number? m1) (number? m2)) (* m1 m2))
	  (else (list '* m1 m2))))
  (define (sum-deriv exp var)
    (make-sum (deriv (addend exp) var)
	      (deriv (augend exp) var)))
  (define (product-deriv exp var)
    (make-sum
      (make-product (multiplier exp)
		    (deriv (multiplicand exp) var))
      (make-product (multiplicand exp)
		    (deriv (multiplier exp) var))))
  (define (base s) (car s))
  (define (exponent s) (cadr s))
  (define (make-exponentiation b e)
    (cond ((= 0 e) 1)
	  ((= 1 e) b)
	  (else (list '** b e))))
  (define (exponentiation-deriv exp var)
    (make-product
      (make-product
	(exponent exp)
	(make-exponentiation (base exp) (- (exponent exp) 1)))
      (deriv (base exp) var)))
  (put 'deriv '+ sum-deriv)
  (put 'deriv '* product-deriv)
  (put 'deriv '** exponentiation-deriv))
