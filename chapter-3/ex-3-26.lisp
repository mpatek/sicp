(define (make-table)
  (list "*table*"))

(define (get-tree tbl)
  (cdr tbl))
(define (is-empty? tbl)
  (null? (get-tree tbl)))
(define (get-key tbl)
  (caar (get-tree tbl)))
(define (get-value tbl)
  (cdar (get-tree tbl)))
(define (get-left-branch tbl)
  (car (cdr (get-tree tbl))))
(define (get-right-branch tbl)
  (car (cdr (cdr (get-tree tbl)))))
(define (set-tree! tbl tree)
  (set-cdr! tbl tree))
(define (set-value! tbl value)
  (set-cdr! (car (get-tree tbl)) value))

(define (lookup tbl key)
  (cond
    ((is-empty? tbl) false)
    ((= (get-key tbl) key) (get-value tbl))
    ((< (get-key tbl) key) (lookup (get-left-branch tbl) key))
    (else (lookup (get-right-branch tbl) key))))

(define (insert! tbl key value)
  (cond
    ((is-empty? tbl) (set-tree! tbl (list (cons key value) (make-table) (make-table))))
    ((= (get-key tbl) key) (set-value! tbl value))
    ((< (get-key tbl) key) (insert! (get-left-branch tbl) key value))
    (else (insert! (get-right-branch tbl) key value))))

(define a (make-table))
(lookup a 1)
(insert! a 1 2)
(lookup a 1)
(insert! a 1 3)
(lookup a 1)
(lookup a 2)
(insert! a 2 3)
(lookup a 2)
(lookup a 0)
(insert! a 0 100)
(lookup a 0)
