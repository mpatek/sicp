(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    ; (display "Trials remaining: ") (display trials-remaining)
    ; (display "Trials passed") (display trials-passed)
    (cond ((= trials-remaining 0)
	   (/ trials-passed trials))
	  ((experiment)
	   (iter (- trials-remaining 1) (+ trials-passed 1)))
	  (else (iter (- trials-remaining 1) trials-passed))))
  (iter trials 0))

(define (estimate-integral p x1 x2 y1 y2 trials)
  (define (experiment) (p (random-in-range x1 x2) (random-in-range y1 y2)))
  (define total-area (* (- x1 x2) (- y1 y2)))
  ; (display "\nTotal area:")
  ; (display total-area)
  (define fraction (monte-carlo trials experiment))
  ; (display "\nFraction:")
  ; (display fraction)
  ; (display " = ")
  (* total-area fraction))

(define (estimate-pi trials)
  (define (p x y)
    ; (display "\n  X: ") (display x)
    ; (display "\n  Y: ") (display y)
    (<= (+ (* (- x 1) (- x 1)) (* (- y 1) (- y 1))) 1))
  (estimate-integral p 0 2.0 0 2.0 trials))
